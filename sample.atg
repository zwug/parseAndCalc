COMPILER Sample
$checkEOF=false

public double calculateExpression(double leftOp, double rightOp, string operation)
{
	Console.WriteLine(operation);
	switch (operation) {
		case "PLUS":
			return leftOp + rightOp;
		case "MINUS":
			return leftOp - rightOp;
		case "MUL":
			return leftOp * rightOp;
		case "DIV":
			return leftOp / rightOp;
		default:
			return 0;
	}
}

CHARACTERS
digit = '0'..'9'.
TOKENS
number = digit {digit}[','{digit}].


PRODUCTIONS
	Sample 	(. double n; .)
	=	{
			Expr<out n>	(. Console.WriteLine(n); .)
		}.
	/*-------------------------------------------------------------*/
	Expr<out double n >	(. double n1; .)
	=	HigherExpr<out n> (. string op = "undefined"; .)
		{	(
			'+' (. op = "PLUS"; .) |
			'-' (. op = "MINUS"; .)
			)
			HigherExpr<out n1>	(. n = calculateExpression(n, n1, op); .)
		}.
	/*-------------------------------------------------------------*/
	HigherExpr<out double n >	(. double n1; .)
	=	singleExpr<out n> (. string op = "undefined"; .)
		{	(
			'*' (. op = "MUL"; .) |
			'/' (. op = "DIV"; .)
			)
			singleExpr<out n1>	(. n = calculateExpression(n, n1, op); .)
		}.
	/*-------------------------------------------------------------*/
	singleExpr<out double n > (. n = 0.0; .)
	=	Term<out n> |
		"sin(" Term<out n> ')' (. n = Math.Sin(n); .)
		.
	/*-------------------------------------------------------------*/
	Term<out double n> 
	=	number	(. n = Convert.ToDouble(t.val); .)
		.
END Sample.
